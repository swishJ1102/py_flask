以下是一个使用JavaParser修改Java代码的示例。该示例展示了如何读取一个Java文件，删除特定方法中的打印语句，并在方法中添加一行新的代码。
示例代码
java
import com.github.javaparser.JavaParser;
import com.github.javaparser.ast.CompilationUnit;
import com.github.javaparser.ast.body.MethodDeclaration;
import com.github.javaparser.ast.expr.MethodCallExpr;
import com.github.javaparser.ast.stmt.ExpressionStmt;
import com.github.javaparser.ast.stmt.Statement;
import com.github.javaparser.ast.visitor.VoidVisitorAdapter;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

public class JavaParserExample {
    public static void main(String[] args) throws Exception {
        // 读取Java源文件
        String filePath = "path/to/your/JavaFile.java"; // 替换为你的文件路径
        CompilationUnit cu = JavaParser.parse(new File(filePath));

        // 创建访问者以修改方法
        cu.accept(new MethodModifier(), null);

        // 将修改后的代码写回文件
        try (FileWriter writer = new FileWriter(filePath)) {
            writer.write(cu.toString());
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static class MethodModifier extends VoidVisitorAdapter<Void> {
        @Override
        public void visit(MethodDeclaration method, Void arg) {
            super.visit(method, arg);

            // 删除方法中的所有System.out.println语句
            method.getBody().ifPresent(body -> {
                body.getStatements().removeIf(statement -> 
                    statement.isExpressionStmt() && 
                    statement.asExpressionStmt().getExpression().isMethodCallExpr() &&
                    statement.asExpressionStmt().getExpression().asMethodCallExpr().getNameAsString().equals("println")
                );

                // 添加新的代码行
                Statement newStatement = JavaParser.parseStatement("int i = 0; // 新增的代码");
                body.addStatement(newStatement);
            });
        }
    }
}

代码说明
导入必要的库：首先导入JavaParser库的相关类。
读取Java源文件：使用JavaParser.parse()方法读取指定路径的Java文件。
定义访问者：创建一个继承自VoidVisitorAdapter的类MethodModifier，用于访问和修改方法。
删除打印语句：在visit方法中，检查方法体中的每个语句，删除所有包含System.out.println的语句。
添加新代码：在方法体的末尾添加一行新的代码（例如，int i = 0;）。
写回文件：将修改后的CompilationUnit对象写回到原始文件中。
使用说明
将filePath替换为你想要修改的Java文件的实际路径。
运行程序后，指定的Java文件将被更新，删除打印语句并添加新的代码行。
