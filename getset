针对你的需求，以下是更加完善的Python脚本：

### 功能：
1. **删除getter/setter方法上方的注释**：包括`/** ... */` 和 `/* ... */` 形式的注释。
2. **处理多行方法签名**：方法签名和方法体可以分布在多行。
3. **删除方法体内的注释**：确保getter和setter方法内的注释也被删除。
4. **删除整个getter和setter方法**：包括其方法体。

### Python脚本：

```python
import re

def remove_comments_and_methods(file_path):
    with open(file_path, 'r', encoding='utf-8') as file:
        lines = file.readlines()

    new_lines = []
    i = 0
    inside_method = False
    inside_comment_block = False

    while i < len(lines):
        line = lines[i].strip()

        # 检查是否进入方法体
        if inside_method:
            # 检查是否是方法体的结束
            if re.match(r'.*\}\s*$', line):
                inside_method = False
            i += 1
            continue

        # 检查是否为多行注释块的结束
        if inside_comment_block:
            if re.match(r'.*\*/\s*$', line):
                inside_comment_block = False
            i += 1
            continue

        # 检查是否为多行注释块的开始
        if re.match(r'^\s*/\*\*', line) or re.match(r'^\s*/\*', line):
            inside_comment_block = True
            i += 1
            continue

        # 处理多行方法签名
        if re.match(r'^\s*public\s+', line):
            method_signature = line
            j = i + 1

            # 拼接方法签名的各行，直到找到 '{'
            while j < len(lines) and not re.match(r'.*\{\s*$', lines[j].strip()):
                method_signature += " " + lines[j].strip()
                j += 1

            # 再检查此方法是否为getter或setter方法
            if re.match(r'^\s*public\s+\w+\s+get\w+\s*\(.*\)\s*\{', method_signature) or \
               re.match(r'^\s*public\s+void\s+set\w+\s*\(.*\)\s*\{', method_signature):
                inside_method = True
                i = j + 1  # 跳到方法体开始的下一行
                continue

        # 保留当前行（不属于被删除的方法或注释）
        new_lines.append(lines[i])
        i += 1

    # 将修改后的内容写回文件
    with open(file_path, 'w', encoding='utf-8') as file:
        file.writelines(new_lines)

# 使用这个函数删除Java文件中的getter/setter方法及其上方的注释
file_path = 'YourJavaFile.java'  # 替换为你的Java文件路径
remove_comments_and_methods(file_path)
```

### 脚本功能解释：
1. **多行方法签名处理**：脚本可以正确处理那些方法签名分布在多行的情况。
2. **注释块处理**：无论是 `/** ... */` 还是 `/* ... */` 格式的注释块，都能够被正确识别和删除。
3. **方法体内的注释**：当检测到是getter/setter方法时，整个方法体（包括内部的注释）都会被删除。
4. **注释和方法删除逻辑**：
   - 如果检测到注释块开始（`/**` 或 `/*`），将删除整个注释块。
   - 如果检测到getter或setter方法的开始（签名），删除方法的全部内容，直到方法结束（即匹配到`}`）。

### 使用说明：
- 将 `file_path` 替换为你实际Java文件的路径。
- 运行脚本，将自动删除指定的getter和setter方法及其注释。

此脚本现在应该能够处理所有你提到的情况，包括删除所有涉及getter/setter方法的注释和方法体。




为了确保删除所有类型的getter和setter方法上方的注释，包括多行注释块（`/** ... */` 和 `/* ... */`），并正确处理方法签名和方法体不在一行的情况，我们需要更详细地处理这些问题。以下是改进后的Python脚本：

### 主要功能：
1. **识别所有类型的getter和setter方法**：包括多行方法签名。
2. **删除与getter和setter方法相关的所有注释块**：包括 `/** ... */` 和 `/* ... */` 注释块。
3. **跳过方法体中的注释**：只删除方法上方的注释，不影响方法体内的注释。

### 改进后的Python脚本：

```python
import re

def remove_comments_above_get_set_methods(file_path):
    with open(file_path, 'r', encoding='utf-8') as file:
        lines = file.readlines()

    new_lines = []
    inside_method = False
    i = 0

    while i < len(lines):
        line = lines[i].strip()

        # 处理多行方法签名
        if inside_method or re.match(r'^\s*public\s+', line):
            method_signature = line
            j = i + 1

            # 拼接方法签名的各行
            while j < len(lines) and not re.match(r'.*\{\s*$', lines[j].strip()):
                line = lines[j].strip()
                method_signature += " " + line
                j += 1

            # 检查是否为getter或setter方法
            if re.match(r'^\s*public\s+\w+\s+get\w+\s*\(.*\)\s*\{', method_signature) or \
               re.match(r'^\s*public\s+void\s+set\w+\s*\(.*\)\s*\{', method_signature):
                inside_method = True

                # 删除与此方法相关的注释
                k = i - 1
                while k >= 0:
                    if re.match(r'^\s*\*/\s*$', lines[k].strip()):  # 找到注释块的结束
                        while k >= 0 and not re.match(r'^\s*/\*{1,2}\s*$', lines[k].strip()):  # 找到注释块的开始
                            k -= 1
                        k -= 1  # 跳过注释块的开头行
                        i = k + 1  # 从注释块的行之后开始
                        break
                    elif not re.match(r'^\s*\*\s*', lines[k].strip()) and not re.match(r'^\s*//', lines[k].strip()):  # 不是注释行
                        break
                    k -= 1
                
                # 跳过方法声明和内容，直到找到方法结束
                while i < len(lines) and not re.match(r'.*\}\s*$', lines[i].strip()):
                    i += 1
                i += 1  # 跳过方法结束的那一行
                inside_method = False
                continue

        # 保留当前行（不属于被删除的方法）
        new_lines.append(lines[i])
        i += 1

    # 将修改后的内容写回文件
    with open(file_path, 'w', encoding='utf-8') as file:
        file.writelines(new_lines)

# 使用这个函数删除Java文件中的getter/setter方法上方的注释
file_path = 'YourJavaFile.java'  # 替换为你的Java文件路径
remove_comments_above_get_set_methods(file_path)
```

### 详细解释：

1. **多行方法签名处理**：脚本会拼接连续的行来处理多行方法签名，以便正确识别getter和setter方法（例如`public void setSession(Map<String, Object> session) {...}`）。

2. **注释块处理**：脚本现在能够处理 `/** ... */` 和 `/* ... */` 两种形式的注释块，确保这些注释块如果出现在getter和setter方法上方，都会被删除。

3. **方法体中的注释保留**：脚本只删除与getter和setter方法直接相关的注释块，并且保留方法体内部的注释。

### 使用说明：
- 替换 `file_path` 为你的Java文件路径。
- 运行Python脚本，它将删除所有getter和setter方法上方的注释（无论这些注释是单行还是多行，使用哪种注释格式）。

运行这个脚本后，你应该能够删除所有符合条件的注释，而不会影响代码中的其他注释。
import re

def remove_comments_above_get_set_methods(file_path):
    with open(file_path, 'r', encoding='utf-8') as file:
        lines = file.readlines()

    new_lines = []
    inside_method = False
    i = 0

    while i < len(lines):
        line = lines[i].strip()

        # 处理多行方法签名
        if inside_method or re.match(r'^\s*public\s+', line):
            method_signature = line
            j = i + 1

            # 拼接方法签名的各行
            while j < len(lines) and not line.endswith('{'):
                line = lines[j].strip()
                method_signature += " " + line
                j += 1

            # 检查方法是否是getter或setter
            if re.match(r'^\s*public\s+\w+\s+get\w+\s*\(\s*\)\s*\{', method_signature) or \
               re.match(r'^\s*public\s+void\s+set\w+\s*\(\s*\w+\s+\w+\)\s*\{', method_signature):
                inside_method = True

                # 删除与此方法相关的注释
                k = i - 1
                while k >= 0:
                    if re.match(r'^\s*\*/\s*$', lines[k]):  # 找到注释块的结束
                        while k >= 0 and not re.match(r'^\s*/\*\*\s*$', lines[k]):  # 找到注释块的开始
                            k -= 1
                        k -= 1  # 再跳过注释块的开头行
                        i = k + 1  # 从注释块的行之后开始
                        break
                    elif not re.match(r'^\s*\*\s*', lines[k]):  # 不是注释行
                        break
                    k -= 1
                
                # 跳过方法声明和内容，直到找到方法结束
                while i < len(lines) and not re.match(r'.*\}\s*$', lines[i]):
                    i += 1
                i += 1  # 跳过方法结束的那一行
                inside_method = False
                continue
        
        # 保留当前行（不属于被删除的方法）
        new_lines.append(lines[i])
        i += 1

    # 将修改后的内容写回文件
    with open(file_path, 'w', encoding='utf-8') as file:
        file.writelines(new_lines)

# 使用这个函数删除Java文件中的getter/setter方法上方的注释
file_path = 'YourJavaFile.java'  # 替换为你的Java文件路径
remove_comments_above_get_set_methods(file_path)
