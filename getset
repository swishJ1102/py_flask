
import re

def remove_comments_above_get_set_methods(file_path):
    with open(file_path, 'r', encoding='utf-8') as file:
        lines = file.readlines()

    new_lines = []
    inside_method = False
    i = 0

    while i < len(lines):
        line = lines[i].strip()

        # 处理多行方法签名
        if inside_method or re.match(r'^\s*public\s+', line):
            method_signature = line
            j = i + 1

            # 拼接方法签名的各行
            while j < len(lines) and not line.endswith('{'):
                line = lines[j].strip()
                method_signature += " " + line
                j += 1

            # 检查方法是否是getter或setter
            if re.match(r'^\s*public\s+\w+\s+get\w+\s*\(\s*\)\s*\{', method_signature) or \
               re.match(r'^\s*public\s+void\s+set\w+\s*\(\s*\w+\s+\w+\)\s*\{', method_signature):
                inside_method = True

                # 删除与此方法相关的注释
                k = i - 1
                while k >= 0:
                    if re.match(r'^\s*\*/\s*$', lines[k]):  # 找到注释块的结束
                        while k >= 0 and not re.match(r'^\s*/\*\*\s*$', lines[k]):  # 找到注释块的开始
                            k -= 1
                        k -= 1  # 再跳过注释块的开头行
                        i = k + 1  # 从注释块的行之后开始
                        break
                    elif not re.match(r'^\s*\*\s*', lines[k]):  # 不是注释行
                        break
                    k -= 1
                
                # 跳过方法声明和内容，直到找到方法结束
                while i < len(lines) and not re.match(r'.*\}\s*$', lines[i]):
                    i += 1
                i += 1  # 跳过方法结束的那一行
                inside_method = False
                continue
        
        # 保留当前行（不属于被删除的方法）
        new_lines.append(lines[i])
        i += 1

    # 将修改后的内容写回文件
    with open(file_path, 'w', encoding='utf-8') as file:
        file.writelines(new_lines)

# 使用这个函数删除Java文件中的getter/setter方法上方的注释
file_path = 'YourJavaFile.java'  # 替换为你的Java文件路径
remove_comments_above_get_set_methods(file_path)
